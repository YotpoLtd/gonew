// Copyright 2011, Bryan Matsuo. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main
/*
 *  Filename:    repository.go
 *  Package:     main
 *  Author:      Bryan Matsuo <bmatsuo@soe.ucsc.edu>
 *  Created:     Sun Jul  3 19:10:10 PDT 2011
 *  Description: 
 */
import "os/exec"

type RepoType int

const (
	NilRepoType RepoType = iota
	GitType
	HgType
	// ...
)

var repotypestrings = []string{
	NilRepoType: "no repository",
	GitType:     "Git",
	HgType:      "Mercurial",
}

func (rt RepoType) String() string {
	return repotypestrings[rt]
}

type Repository interface {
	// Return the Repository's underlying RepoType.
	Type() RepoType
	// Initialize the working directory as a new repository.
	Initialize(commit bool) error
	// Add a set of paths to the repository.
	Add(paths ...string) error
	// Commit changes with a given message.
	Commit(message string) error
	// Returns true if there is nothing to commit on the working branch.
	//IsClean()               bool
}

//  A Git Repository object.
type GitRepository struct{}

func (git GitRepository) Type() RepoType { return GitType }
func (git GitRepository) Initialize(add, commit bool) error {
	var (
		initcmd = exec.Command("git", "init")
	)
	errInit := initcmd.Run()
	if errInit != nil {
		return errInit
	}
	if add {
		errAdd := git.Add(".")
		if errAdd != nil {
			return errAdd
		}
	}
	if commit {
		errCommit := git.Commit("Empty project created by gonew")
		if errCommit != nil {
			return errCommit
		}
	}
	return nil
}
func (git GitRepository) Add(paths ...string) error {
	var cmdslice = make([]string, len(paths)+1)
	cmdslice[0] = "add"
	copy(cmdslice[1:], paths)
	var (
		addcmd = exec.Command("git", cmdslice...)
		errAdd = addcmd.Run()
	)
	return errAdd
}
func (git GitRepository) Commit(message string) error {
	var (
		commitcmd = exec.Command("git", "commit",
			"-a", "-m", "Empty project generated by gonew.")
		errCommit = commitcmd.Run()
	)
	return errCommit
}

//  A Mercurial Repository object.
type HgRepository struct{}

func (hg HgRepository) Type() RepoType { return HgType }
func (hg HgRepository) Initialize(add, commit bool) error {
	var (
		initcmd = exec.Command("hg", "init")
	)
	errInit := initcmd.Run()
	if errInit != nil {
		return errInit
	}
	if add {
		errAdd := hg.Add()
		if errAdd != nil {
			return errAdd
		}
	}
	if commit {
		errCommit := hg.Commit("Empty project created by gonew")
		if errCommit != nil {
			return errCommit
		}
	}
	return nil
}
func (hg HgRepository) Add(paths ...string) error {
	var cmdslice = make([]string, len(paths)+1)
	cmdslice[0] = "add"
	copy(cmdslice[1:], paths)
	var (
		addcmd = exec.Command("hg", cmdslice...)
		errAdd = addcmd.Run()
	)
	return errAdd
}

func (hg HgRepository) Commit(message string) error {
	var (
		commitcmd = exec.Command("hg", "commit",
			"-m", "Empty project generated by gonew.")
		errCommit = commitcmd.Run()
	)
	return errCommit
}
