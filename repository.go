// Copyright 2011, Bryan Matsuo. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
package main
/*
 *  Filename:    repository.go
 *  Package:     main
 *  Author:      Bryan Matsuo <bmatsuo@soe.ucsc.edu>
 *  Created:     Sun Jul  3 19:10:10 PDT 2011
 *  Description: 
 */
import (
    "os"
    "exec"
)

type RepoType int
const(
    NilRepoType RepoType = iota
    GitType
    // MercurialType
    // ...
)

type Repository interface {
    Initialize(commit bool) os.Error // Initialize the working directory as a new repository.
    Add(paths...string)     os.Error // Add a set of paths to the repository.
    Commit(message string)  os.Error // Commit changes with a given message.
    //IsClean()               bool     // Returns true if there is nothing to commit on the working branch.
}

type GitRepository struct {
}
func (git GitRepository) Initialize(add, commit bool) os.Error {
    var (
        initcmd = exec.Command("git", "init")
    )
    errInit := initcmd.Run()
    if errInit != nil {
        return errInit
    }
    if add {
        errAdd := git.Add(".")
        if errAdd != nil {
            return errAdd
        }
    }
    if commit {
        errCommit := git.Commit("Empty project created by gonew")
        if errCommit != nil {
            return errCommit
        }
    }
    return nil
}

func (git GitRepository) Add(paths...string) os.Error {
    var cmdslice = make([]string,len(paths)+1)
    cmdslice[0] = "add"
    copy(cmdslice[1:], paths)
    var (
        addcmd = exec.Command("git", cmdslice...)
        errAdd = addcmd.Run()
    )
    return errAdd
}

func (git GitRepository) Commit(message string) os.Error {
    var (
        commitcmd = exec.Command("git", "commit",
            "-a", "-m", "Empty project generated by gonew.")
        errCommit = commitcmd.Run()
    )
    return errCommit
}

type MercurialRepository struct {
}
func (hg MercurialRepository) Initialize(add, commit bool) os.Error {
    var (
        initcmd = exec.Command("hg", "init")
    )
    errInit := initcmd.Run()
    if errInit != nil {
        return errInit
    }
    if add {
        errAdd := hg.Add(".")
        if errAdd != nil {
            return errAdd
        }
    }
    if commit {
        errCommit := hg.Commit("Empty project created by gonew")
        if errCommit != nil {
            return errCommit
        }
    }
    return nil
}
func (hg MercurialRepository) Add(paths...string) os.Error {
    var cmdslice = make([]string,len(paths)+1)
    cmdslice[0] = "add"
    copy(cmdslice[1:], paths)
    var (
        addcmd = exec.Command("hg", cmdslice...)
        errAdd = addcmd.Run()
    )
    return errAdd
}

func (hg MercurialRepository) Commit(message string) os.Error {
    var (
        commitcmd = exec.Command("hg", "commit",
            "-a", "-m", "Empty project generated by gonew.")
        errCommit = commitcmd.Run()
    )
    return errCommit
}
